      DOUBLE PRECISION FUNCTION SUM2(V,U,LDV)
      INTEGER LDV,I
      DOUBLE PRECISION V(LDV),U(LDV)
      SUM2 = 0D0
      DO I=1,LDV
        SUM2 = SUM2 + V(I)*U(I)
      END DO
      RETURN
      END FUNCTION
      
      SUBROUTINE PRINT_MATRIX(A,NROW,NCOL)
      INTEGER NROW,NCOL
      DOUBLE PRECISION A(NROW,NCOL)
      INTEGER I
      WRITE (*,*) "MATRIX ",NROW,"            x",NCOL
      DO I=1,NROW
        WRITE(*,*) "[",A(I,:),"]"
      END DO
      END SUBROUTINE
      
      SUBROUTINE PRINT_VECTOR(A,N)
      INTEGER N
      DOUBLE PRECISION A(N)
      WRITE (*,*) "VECTOR ",N
      WRITE(*,*) "[",A(:),"]"
      END SUBROUTINE
      
      SUBROUTINE SVD(A,NROW,NCOL,U,SIG,V)
      INTEGER NROW,NCOL,I
      DOUBLE PRECISION A(NROW,NCOL)
      DOUBLE PRECISION U(NROW,NROW)
      DOUBLE PRECISION SIG(NROW,NCOL)
      DOUBLE PRECISION V(NCOL,NCOL)
      DOUBLE PRECISION AAT(NROW,NROW)
      DOUBLE PRECISION ATA(NCOL,NCOL)
      DOUBLE PRECISION SIGMA(NROW)
!f2py intent(inplace) U,SIG,V
      CALL DGEMM('N','T',NROW,NROW,NCOL,1D0,A,NROW,A,NROW,0D0,
     $           AAT,NROW)
      CALL EIGENPAIRS_POWERMETHOD(AAT,NROW,U,SIGMA,NROW)
      SIG = 0D0
      DO I = 1,MIN(NROW,NCOL)
        SIG(I,I) = SQRT(SIGMA(I))
      END DO
      CALL DGEMM('T','N',NCOL,NCOL,NROW,1D0,A,NROW,A,NROW,0D0,
     $           ATA,NCOL)
      CALL EIGENPAIRS_POWERMETHOD(ATA,NCOL,V,SIGMA,NCOL)
      V = TRANSPOSE(V)
      END SUBROUTINE
      
      SUBROUTINE INVERSION(A,INVERSE,LDA)
      INTEGER LDA,I
      DOUBLE PRECISION A(LDA,LDA),INVERSE(LDA,LDA)
      DOUBLE PRECISION TRIMATRIX(LDA,LDA)
      DOUBLE PRECISION IDENT(LDA)
      DO I=1,LDA
        TRIMATRIX = A
        IDENT = 0D0
        IDENT(I) = 1D0
        CALL HOUSEHOLDER(TRIMATRIX,LDA,IDENT,LDA)
        CALL REMONTEE(TRIMATRIX,LDA,IDENT,LDA)
        INVERSE(:,I) = IDENT
      END DO
      END SUBROUTINE
      
      
      SUBROUTINE REMONTEE(U,LDU,B,LDB)
      IMPLICIT NONE
      DOUBLE PRECISION U(LDU,*), B(LDB), S
      INTEGER I, J,LDU,LDB
      DO I=LDU,1,-1
        S=0
        DO J=I+1,LDU,1
            S=S+U(I,J)*B(J)
        END DO
        B(I)=(B(I)-S)/U(I,I)
      END DO
      RETURN
      END SUBROUTINE
      
      SUBROUTINE HOUSEHOLDER(A,LDA,B,LDB)
      DOUBLE PRECISION A(LDA,*),B(LDB)
      DOUBLE PRECISION, POINTER :: U(:,:),UP(:,:)
      DOUBLE PRECISION, EXTERNAL :: SUM2
      DOUBLE PRECISION COEF
      INTEGER LDA,ETAPE
      DO ETAPE = 1,LDA-1
        ALLOCATE(U(LDA-ETAPE+1,1),UP(1,LDA-ETAPE+1))
        U = A(ETAPE:LDA,ETAPE:ETAPE)
        UP = 0D0
        U(1,1)= U(1,1) - SQRT(SUM2(U(:,1),U(:,1),LDA-ETAPE+1))
        COEF = -2D0/(SUM2(U(:,1),U(:,1),LDA-ETAPE+1))
        CALL DGEMM('T','N',1,LDA-ETAPE+1,LDA-ETAPE+1,1D0,
     $   U,LDA-ETAPE+1,A(ETAPE:LDA,ETAPE:LDA),LDA-ETAPE+1,0D0,UP,1)
        CALL DGEMM('N','N',LDA-ETAPE+1,LDA-ETAPE+1,1,COEF,
     $    U,LDA-ETAPE+1,UP,1,1D0,A(ETAPE:LDA,ETAPE:LDA),LDA-ETAPE+1)
        COEF = COEF * SUM2(U(:,1),B(ETAPE:LDB),LDB-ETAPE+1)
        B(ETAPE:LDB) = B(ETAPE:LDB) + COEF * U(:,1)
        DEALLOCATE(U,UP)
      END DO
      END SUBROUTINE
      
      SUBROUTINE POWERMETHOD(A,LDA,X,LDX,ERREUR)
      IMPLICIT NONE
      INTEGER LDA,LDX
      DOUBLE PRECISION A(LDA,LDA), X(LDX), X1(LDX)
      DOUBLE PRECISION ERREUR
      CALL DGEMV('N',LDA,LDA,1D0,A,LDA,X,1,0D0,X1,1)
      X1 = X1/NORM2(X1)
      DO WHILE(ERREUR .lt. NORM2(X1-X))
        X = X1
        CALL DGEMV('N',LDA,LDA,1D0,A,LDA,X,1,0D0,X1,1)
        X1 = X1/NORM2(X1)
      END DO
      X = X1
      END SUBROUTINE
      
      SUBROUTINE EIGENPAIRS_POWERMETHOD(A,LDA,EVEC,EVAL,LDV)
      IMPLICIT NONE
      INTEGER LDA,LDV,I
      DOUBLE PRECISION A(LDA,LDA), EVEC(LDV,LDV), EVAL(LDV)
      DOUBLE PRECISION X(LDA)
      X(1) = 1D0
      DO I=1,LDV
        CALL POWERMETHOD(A,LDA,X,LDA,10D0**(-9))
        EVEC(:,I) = X
        CALL DGEMV('N',LDA,LDA,1D0,A,LDA,EVEC(:,I),1,0D0,X,1)
        EVAL(I) = X(1)/EVEC(1,I)
        X = X * 0
        X(1) = 1D0
        CALL DGEMM('N','T',LDV,LDV,1,-EVAL(I)/NORM2(EVEC(:,I)),
     $             EVEC(:,I),LDV,EVEC(:,I),LDV,1D0,A,LDA)
      END DO
      END SUBROUTINE
