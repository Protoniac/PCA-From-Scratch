import numpy as np
import background_fortran as bf
import matplotlib.pyplot as plt
import pandas as pd
import csv

#Subroutines generating plots

def print_factorial_individus(vector,component1,component2,label,ratio):
    fig, ax = plt.subplots(figsize=(7,7))
    ax.scatter(vector[:,component1-1],vector[:,component2-1])
    plt.setp(ax.axhline(y=0,color='k'), linewidth=0.5)
    plt.setp(ax.axvline(x=0,color='k'), linewidth=0.5)
    legend1 = 'Axis '+str(component1)+' ('+str(round(ratio[component1-1],2))+'% )'
    legend2 = 'Axis '+str(component2)+' ('+str(round(ratio[component2-1],2))+'% )'
    ax.set_xlabel(legend1)
    ax.set_ylabel(legend2)
    for i, txt in enumerate(label):
        ax.annotate(txt, (vector[:,component1-1][i],vector[:,component2-1][i]))
    plt.title("PCA : Components "+str(component1)+" and "+str(component2))

def print_contributions_individus(vector,component,label,ratio):
    x = 100*(vector[:,component-1]**2)/((sig[component-1,component-1]**2))
    fig, ax = plt.subplots(figsize=(10,10))
    index = np.r_[0:len(x)]
    ax.bar(index,x,tick_label = np.r_[0:len(x)]+1)
    for i in range(len(x)):
        plt.text(index[i] - 0.4 , x[i] + 0.50, str(round(x[i],1)))
    plt.xlabel('Individus') 
    plt.ylabel('Contribution percentages')
    plt.title("PCA : Individus contribitions to the Component "+str(component)+" ("+str(round(ratio[component-1],2))+"% )")
    
#Data Importation

data = []
with open('notes.csv','r') as csv_file: 
    csv_reader = csv.reader(csv_file,delimiter=';')
    line_count = 0
    label_variables = csv_file.readline().split(';')
    label_variables.pop(0)
    label_indivius = []
    for row in csv_reader:
        label_indivius.append(row[0])
        row.pop(0)
        data.append(np.array(row).astype(float))
        line_count += 1
        
data = np.array(data).reshape(line_count,len(data[0]))

#Data Scaling
for i in range(len(data[0,:])):
    data[:,i] -= np.mean(data[:,i])
    data[:,i] /= (np.sqrt(np.var(data[:,i]))*np.sqrt(data.shape[0]))

#Calling the fortran Singular Values Decomposition subroutine

u = np.zeros((data.shape[0],data.shape[0]))
sig = np.zeros((data.shape))
v = np.zeros((data.shape[1],data.shape[1]))

bf.svd(data,u,sig,v)

#Individus projection on the 2 first eingenvectors generated by SVD
ind = np.dot(data,np.transpose(v)[:,0:2])

#Percentage of variance explained
label = np.r_[1:len(ind[:,0])]
ratio = []
for i in range(0,min(len(sig[0]),len(sig[1]))):
    ratio.append(sig[i,i]**2*100/(data.shape[1]))

#Plotting individus contribution on the first axis
print_contributions_individus(ind,1,label_indivius,ratio)

#Plotting the individus projections on axis 1 and 2
print_factorial_individus(ind,1,2,label_indivius,ratio)
plt.show()

